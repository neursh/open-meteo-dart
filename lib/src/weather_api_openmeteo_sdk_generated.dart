// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable, constant_identifier_names

library openmeteo_sdk;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

enum Unit {
  undefined(0),
  celsius(1),
  centimetre(2),
  cubic_metre_per_cubic_metre(3),
  cubic_metre_per_second(4),
  degree_direction(5),
  dimensionless_integer(6),
  dimensionless(7),
  european_air_quality_index(8),
  fahrenheit(9),
  feet(10),
  fraction(11),
  gdd_celsius(12),
  geopotential_metre(13),
  grains_per_cubic_metre(14),
  gram_per_kilogram(15),
  hectopascal(16),
  hours(17),
  inch(18),
  iso8601(19),
  joule_per_kilogram(20),
  kelvin(21),
  kilopascal(22),
  kilogram_per_square_metre(23),
  kilometres_per_hour(24),
  knots(25),
  megajoule_per_square_metre(26),
  metre_per_second_not_unit_converted(27),
  metre_per_second(28),
  metre(29),
  micrograms_per_cubic_metre(30),
  miles_per_hour(31),
  millimetre(32),
  pascal(33),
  per_second(34),
  percentage(35),
  seconds(36),
  unix_time(37),
  us_air_quality_index(38),
  watt_per_square_metre(39),
  wmo_code(40),
  parts_per_million(41);

  final int value;
  const Unit(this.value);

  factory Unit.fromValue(int value) {
    switch (value) {
      case 0:
        return Unit.undefined;
      case 1:
        return Unit.celsius;
      case 2:
        return Unit.centimetre;
      case 3:
        return Unit.cubic_metre_per_cubic_metre;
      case 4:
        return Unit.cubic_metre_per_second;
      case 5:
        return Unit.degree_direction;
      case 6:
        return Unit.dimensionless_integer;
      case 7:
        return Unit.dimensionless;
      case 8:
        return Unit.european_air_quality_index;
      case 9:
        return Unit.fahrenheit;
      case 10:
        return Unit.feet;
      case 11:
        return Unit.fraction;
      case 12:
        return Unit.gdd_celsius;
      case 13:
        return Unit.geopotential_metre;
      case 14:
        return Unit.grains_per_cubic_metre;
      case 15:
        return Unit.gram_per_kilogram;
      case 16:
        return Unit.hectopascal;
      case 17:
        return Unit.hours;
      case 18:
        return Unit.inch;
      case 19:
        return Unit.iso8601;
      case 20:
        return Unit.joule_per_kilogram;
      case 21:
        return Unit.kelvin;
      case 22:
        return Unit.kilopascal;
      case 23:
        return Unit.kilogram_per_square_metre;
      case 24:
        return Unit.kilometres_per_hour;
      case 25:
        return Unit.knots;
      case 26:
        return Unit.megajoule_per_square_metre;
      case 27:
        return Unit.metre_per_second_not_unit_converted;
      case 28:
        return Unit.metre_per_second;
      case 29:
        return Unit.metre;
      case 30:
        return Unit.micrograms_per_cubic_metre;
      case 31:
        return Unit.miles_per_hour;
      case 32:
        return Unit.millimetre;
      case 33:
        return Unit.pascal;
      case 34:
        return Unit.per_second;
      case 35:
        return Unit.percentage;
      case 36:
        return Unit.seconds;
      case 37:
        return Unit.unix_time;
      case 38:
        return Unit.us_air_quality_index;
      case 39:
        return Unit.watt_per_square_metre;
      case 40:
        return Unit.wmo_code;
      case 41:
        return Unit.parts_per_million;
      default:
        throw StateError('Invalid value $value for bit flag enum');
    }
  }

  static Unit? _createOrNull(int? value) =>
      value == null ? null : Unit.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 41;
  static const fb.Reader<Unit> reader = _UnitReader();
}

class _UnitReader extends fb.Reader<Unit> {
  const _UnitReader();

  @override
  int get size => 1;

  @override
  Unit read(fb.BufferContext bc, int offset) =>
      Unit.fromValue(const fb.Uint8Reader().read(bc, offset));
}

enum Model {
  undefined(0),
  best_match(1),
  gfs_seamless(2),
  gfs_global(3),
  gfs_hrrr(4),
  meteofrance_seamless(5),
  meteofrance_arpege_seamless(6),
  meteofrance_arpege_world(7),
  meteofrance_arpege_europe(8),
  meteofrance_arome_seamless(9),
  meteofrance_arome_france(10),
  meteofrance_arome_france_hd(11),
  jma_seamless(12),
  jma_msm(13),
  jms_gsm(14),
  jma_gsm(15),
  gem_seamless(16),
  gem_global(17),
  gem_regional(18),
  gem_hrdps_continental(19),
  icon_seamless(20),
  icon_global(21),
  icon_eu(22),
  icon_d2(23),
  ecmwf_ifs04(24),
  metno_nordic(25),
  era5_seamless(26),
  era5(27),
  cerra(28),
  era5_land(29),
  ecmwf_ifs(30),
  gwam(31),
  ewam(32),
  glofas_seamless_v3(33),
  glofas_forecast_v3(34),
  glofas_consolidated_v3(35),
  glofas_seamless_v4(36),
  glofas_forecast_v4(37),
  glofas_consolidated_v4(38),
  gfs025(39),
  gfs05(40),
  CMCC_CM2_VHR4(41),
  FGOALS_f3_H_highresSST(42),
  FGOALS_f3_H(43),
  HiRAM_SIT_HR(44),
  MRI_AGCM3_2_S(45),
  EC_Earth3P_HR(46),
  MPI_ESM1_2_XR(47),
  NICAM16_8S(48),
  cams_europe(49),
  cams_global(50),
  cfsv2(51),
  era5_ocean(52),
  cma_grapes_global(53),
  bom_access_global(54),
  bom_access_global_ensemble(55),
  arpae_cosmo_seamless(56),
  arpae_cosmo_2i(57),
  arpae_cosmo_2i_ruc(58),
  arpae_cosmo_5m(59),
  ecmwf_ifs025(60),
  ecmwf_aifs025(61),
  gfs013(62),
  gfs_graphcast025(63),
  ecmwf_wam025(64),
  meteofrance_wave(65),
  meteofrance_currents(66),
  ecmwf_wam025_ensemble(67),
  ncep_gfswave025(68),
  ncep_gefswave025(69),
  knmi_seamless(70),
  knmi_harmonie_arome_europe(71),
  knmi_harmonie_arome_netherlands(72),
  dmi_seamless(73),
  dmi_harmonie_arome_europe(74),
  metno_seamless(75),
  era5_ensemble(76),
  ecmwf_ifs_analysis(77),
  ecmwf_ifs_long_window(78),
  ecmwf_ifs_analysis_long_window(79),
  ukmo_global_deterministic_10km(80),
  ukmo_uk_deterministic_2km(81),
  ukmo_seamless(82),
  ncep_gfswave016(83),
  ncep_nbm_conus(84),
  ukmo_global_ensemble_20km(85),
  ecmwf_aifs025_single(86),
  jma_jaxa_himawari(87),
  eumetsat_sarah3(88),
  eumetsat_lsa_saf_msg(89),
  eumetsat_lsa_saf_iodc(90),
  satellite_radiation_seamless(91),
  kma_gdps(92),
  kma_ldps(93),
  kma_seamless(94),
  italia_meteo_arpae_icon_2i(95);

  final int value;
  const Model(this.value);

  factory Model.fromValue(int value) {
    switch (value) {
      case 0:
        return Model.undefined;
      case 1:
        return Model.best_match;
      case 2:
        return Model.gfs_seamless;
      case 3:
        return Model.gfs_global;
      case 4:
        return Model.gfs_hrrr;
      case 5:
        return Model.meteofrance_seamless;
      case 6:
        return Model.meteofrance_arpege_seamless;
      case 7:
        return Model.meteofrance_arpege_world;
      case 8:
        return Model.meteofrance_arpege_europe;
      case 9:
        return Model.meteofrance_arome_seamless;
      case 10:
        return Model.meteofrance_arome_france;
      case 11:
        return Model.meteofrance_arome_france_hd;
      case 12:
        return Model.jma_seamless;
      case 13:
        return Model.jma_msm;
      case 14:
        return Model.jms_gsm;
      case 15:
        return Model.jma_gsm;
      case 16:
        return Model.gem_seamless;
      case 17:
        return Model.gem_global;
      case 18:
        return Model.gem_regional;
      case 19:
        return Model.gem_hrdps_continental;
      case 20:
        return Model.icon_seamless;
      case 21:
        return Model.icon_global;
      case 22:
        return Model.icon_eu;
      case 23:
        return Model.icon_d2;
      case 24:
        return Model.ecmwf_ifs04;
      case 25:
        return Model.metno_nordic;
      case 26:
        return Model.era5_seamless;
      case 27:
        return Model.era5;
      case 28:
        return Model.cerra;
      case 29:
        return Model.era5_land;
      case 30:
        return Model.ecmwf_ifs;
      case 31:
        return Model.gwam;
      case 32:
        return Model.ewam;
      case 33:
        return Model.glofas_seamless_v3;
      case 34:
        return Model.glofas_forecast_v3;
      case 35:
        return Model.glofas_consolidated_v3;
      case 36:
        return Model.glofas_seamless_v4;
      case 37:
        return Model.glofas_forecast_v4;
      case 38:
        return Model.glofas_consolidated_v4;
      case 39:
        return Model.gfs025;
      case 40:
        return Model.gfs05;
      case 41:
        return Model.CMCC_CM2_VHR4;
      case 42:
        return Model.FGOALS_f3_H_highresSST;
      case 43:
        return Model.FGOALS_f3_H;
      case 44:
        return Model.HiRAM_SIT_HR;
      case 45:
        return Model.MRI_AGCM3_2_S;
      case 46:
        return Model.EC_Earth3P_HR;
      case 47:
        return Model.MPI_ESM1_2_XR;
      case 48:
        return Model.NICAM16_8S;
      case 49:
        return Model.cams_europe;
      case 50:
        return Model.cams_global;
      case 51:
        return Model.cfsv2;
      case 52:
        return Model.era5_ocean;
      case 53:
        return Model.cma_grapes_global;
      case 54:
        return Model.bom_access_global;
      case 55:
        return Model.bom_access_global_ensemble;
      case 56:
        return Model.arpae_cosmo_seamless;
      case 57:
        return Model.arpae_cosmo_2i;
      case 58:
        return Model.arpae_cosmo_2i_ruc;
      case 59:
        return Model.arpae_cosmo_5m;
      case 60:
        return Model.ecmwf_ifs025;
      case 61:
        return Model.ecmwf_aifs025;
      case 62:
        return Model.gfs013;
      case 63:
        return Model.gfs_graphcast025;
      case 64:
        return Model.ecmwf_wam025;
      case 65:
        return Model.meteofrance_wave;
      case 66:
        return Model.meteofrance_currents;
      case 67:
        return Model.ecmwf_wam025_ensemble;
      case 68:
        return Model.ncep_gfswave025;
      case 69:
        return Model.ncep_gefswave025;
      case 70:
        return Model.knmi_seamless;
      case 71:
        return Model.knmi_harmonie_arome_europe;
      case 72:
        return Model.knmi_harmonie_arome_netherlands;
      case 73:
        return Model.dmi_seamless;
      case 74:
        return Model.dmi_harmonie_arome_europe;
      case 75:
        return Model.metno_seamless;
      case 76:
        return Model.era5_ensemble;
      case 77:
        return Model.ecmwf_ifs_analysis;
      case 78:
        return Model.ecmwf_ifs_long_window;
      case 79:
        return Model.ecmwf_ifs_analysis_long_window;
      case 80:
        return Model.ukmo_global_deterministic_10km;
      case 81:
        return Model.ukmo_uk_deterministic_2km;
      case 82:
        return Model.ukmo_seamless;
      case 83:
        return Model.ncep_gfswave016;
      case 84:
        return Model.ncep_nbm_conus;
      case 85:
        return Model.ukmo_global_ensemble_20km;
      case 86:
        return Model.ecmwf_aifs025_single;
      case 87:
        return Model.jma_jaxa_himawari;
      case 88:
        return Model.eumetsat_sarah3;
      case 89:
        return Model.eumetsat_lsa_saf_msg;
      case 90:
        return Model.eumetsat_lsa_saf_iodc;
      case 91:
        return Model.satellite_radiation_seamless;
      case 92:
        return Model.kma_gdps;
      case 93:
        return Model.kma_ldps;
      case 94:
        return Model.kma_seamless;
      case 95:
        return Model.italia_meteo_arpae_icon_2i;
      default:
        throw StateError('Invalid value $value for bit flag enum');
    }
  }

  static Model? _createOrNull(int? value) =>
      value == null ? null : Model.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 95;
  static const fb.Reader<Model> reader = _ModelReader();
}

class _ModelReader extends fb.Reader<Model> {
  const _ModelReader();

  @override
  int get size => 1;

  @override
  Model read(fb.BufferContext bc, int offset) =>
      Model.fromValue(const fb.Uint8Reader().read(bc, offset));
}

enum Variable {
  undefined(0),
  apparent_temperature(1),
  cape(2),
  cloud_cover(3),
  cloud_cover_high(4),
  cloud_cover_low(5),
  cloud_cover_mid(6),
  daylight_duration(7),
  dew_point(8),
  diffuse_radiation(9),
  diffuse_radiation_instant(10),
  direct_normal_irradiance(11),
  direct_normal_irradiance_instant(12),
  direct_radiation(13),
  direct_radiation_instant(14),
  et0_fao_evapotranspiration(15),
  evapotranspiration(16),
  freezing_level_height(17),
  growing_degree_days(18),
  is_day(19),
  latent_heat_flux(20),
  leaf_wetness_probability(21),
  lifted_index(22),
  lightning_potential(23),
  precipitation(24),
  precipitation_hours(25),
  precipitation_probability(26),
  pressure_msl(27),
  rain(28),
  relative_humidity(29),
  runoff(30),
  sensible_heat_flux(31),
  shortwave_radiation(32),
  shortwave_radiation_instant(33),
  showers(34),
  snow_depth(35),
  snow_height(36),
  snowfall(37),
  snowfall_height(38),
  snowfall_water_equivalent(39),
  sunrise(40),
  sunset(41),
  soil_moisture(42),
  soil_moisture_index(43),
  soil_temperature(44),
  surface_pressure(45),
  surface_temperature(46),
  temperature(47),
  terrestrial_radiation(48),
  terrestrial_radiation_instant(49),
  total_column_integrated_water_vapour(50),
  updraft(51),
  uv_index(52),
  uv_index_clear_sky(53),
  vapour_pressure_deficit(54),
  visibility(55),
  weather_code(56),
  wind_direction(57),
  wind_gusts(58),
  wind_speed(59),
  vertical_velocity(60),
  geopotential_height(61),
  wet_bulb_temperature(62),
  river_discharge(63),
  wave_height(64),
  wave_period(65),
  wave_direction(66),
  wind_wave_height(67),
  wind_wave_period(68),
  wind_wave_peak_period(69),
  wind_wave_direction(70),
  swell_wave_height(71),
  swell_wave_period(72),
  swell_wave_peak_period(73),
  swell_wave_direction(74),
  pm10(75),
  pm2p5(76),
  dust(77),
  aerosol_optical_depth(78),
  carbon_monoxide(79),
  nitrogen_dioxide(80),
  ammonia(81),
  ozone(82),
  sulphur_dioxide(83),
  alder_pollen(84),
  birch_pollen(85),
  grass_pollen(86),
  mugwort_pollen(87),
  olive_pollen(88),
  ragweed_pollen(89),
  european_aqi(90),
  european_aqi_pm2p5(91),
  european_aqi_pm10(92),
  european_aqi_nitrogen_dioxide(93),
  european_aqi_ozone(94),
  european_aqi_sulphur_dioxide(95),
  us_aqi(96),
  us_aqi_pm2p5(97),
  us_aqi_pm10(98),
  us_aqi_nitrogen_dioxide(99),
  us_aqi_ozone(100),
  us_aqi_sulphur_dioxide(101),
  us_aqi_carbon_monoxide(102),
  sunshine_duration(103),
  convective_inhibition(104),
  shortwave_radiation_clear_sky(105),
  global_tilted_irradiance(106),
  global_tilted_irradiance_instant(107),
  ocean_current_velocity(108),
  ocean_current_direction(109),
  cloud_base(110),
  cloud_top(111),
  mass_density(112),
  boundary_layer_height(113),
  formaldehyde(114),
  glyoxal(115),
  non_methane_volatile_organic_compounds(116),
  pm10_wildfires(117),
  peroxyacyl_nitrates(118),
  secondary_inorganic_aerosol(119),
  residential_elementary_carbon(120),
  total_elementary_carbon(121),
  pm2_5_total_organic_matter(122),
  sea_salt_aerosol(123),
  nitrogen_monoxide(124),
  thunderstorm_probability(125),
  rain_probability(126),
  freezing_rain_probability(127),
  ice_pellets_probability(128),
  snowfall_probability(129),
  carbon_dioxide(130),
  methane(131),
  sea_level_height_msl(132),
  sea_surface_temperature(133),
  invert_barometer_height(134),
  hail(135),
  albedo(136),
  precipitation_type(137),
  convective_cloud_base(138),
  convective_cloud_top(139),
  snow_depth_water_equivalent(140),
  secondary_swell_wave_height(141),
  secondary_swell_wave_period(142),
  secondary_swell_wave_peak_period(143),
  secondary_swell_wave_direction(144),
  tertiary_swell_wave_height(145),
  tertiary_swell_wave_period(146),
  tertiary_swell_wave_peak_period(147),
  tertiary_swell_wave_direction(148);

  final int value;
  const Variable(this.value);

  factory Variable.fromValue(int value) {
    switch (value) {
      case 0:
        return Variable.undefined;
      case 1:
        return Variable.apparent_temperature;
      case 2:
        return Variable.cape;
      case 3:
        return Variable.cloud_cover;
      case 4:
        return Variable.cloud_cover_high;
      case 5:
        return Variable.cloud_cover_low;
      case 6:
        return Variable.cloud_cover_mid;
      case 7:
        return Variable.daylight_duration;
      case 8:
        return Variable.dew_point;
      case 9:
        return Variable.diffuse_radiation;
      case 10:
        return Variable.diffuse_radiation_instant;
      case 11:
        return Variable.direct_normal_irradiance;
      case 12:
        return Variable.direct_normal_irradiance_instant;
      case 13:
        return Variable.direct_radiation;
      case 14:
        return Variable.direct_radiation_instant;
      case 15:
        return Variable.et0_fao_evapotranspiration;
      case 16:
        return Variable.evapotranspiration;
      case 17:
        return Variable.freezing_level_height;
      case 18:
        return Variable.growing_degree_days;
      case 19:
        return Variable.is_day;
      case 20:
        return Variable.latent_heat_flux;
      case 21:
        return Variable.leaf_wetness_probability;
      case 22:
        return Variable.lifted_index;
      case 23:
        return Variable.lightning_potential;
      case 24:
        return Variable.precipitation;
      case 25:
        return Variable.precipitation_hours;
      case 26:
        return Variable.precipitation_probability;
      case 27:
        return Variable.pressure_msl;
      case 28:
        return Variable.rain;
      case 29:
        return Variable.relative_humidity;
      case 30:
        return Variable.runoff;
      case 31:
        return Variable.sensible_heat_flux;
      case 32:
        return Variable.shortwave_radiation;
      case 33:
        return Variable.shortwave_radiation_instant;
      case 34:
        return Variable.showers;
      case 35:
        return Variable.snow_depth;
      case 36:
        return Variable.snow_height;
      case 37:
        return Variable.snowfall;
      case 38:
        return Variable.snowfall_height;
      case 39:
        return Variable.snowfall_water_equivalent;
      case 40:
        return Variable.sunrise;
      case 41:
        return Variable.sunset;
      case 42:
        return Variable.soil_moisture;
      case 43:
        return Variable.soil_moisture_index;
      case 44:
        return Variable.soil_temperature;
      case 45:
        return Variable.surface_pressure;
      case 46:
        return Variable.surface_temperature;
      case 47:
        return Variable.temperature;
      case 48:
        return Variable.terrestrial_radiation;
      case 49:
        return Variable.terrestrial_radiation_instant;
      case 50:
        return Variable.total_column_integrated_water_vapour;
      case 51:
        return Variable.updraft;
      case 52:
        return Variable.uv_index;
      case 53:
        return Variable.uv_index_clear_sky;
      case 54:
        return Variable.vapour_pressure_deficit;
      case 55:
        return Variable.visibility;
      case 56:
        return Variable.weather_code;
      case 57:
        return Variable.wind_direction;
      case 58:
        return Variable.wind_gusts;
      case 59:
        return Variable.wind_speed;
      case 60:
        return Variable.vertical_velocity;
      case 61:
        return Variable.geopotential_height;
      case 62:
        return Variable.wet_bulb_temperature;
      case 63:
        return Variable.river_discharge;
      case 64:
        return Variable.wave_height;
      case 65:
        return Variable.wave_period;
      case 66:
        return Variable.wave_direction;
      case 67:
        return Variable.wind_wave_height;
      case 68:
        return Variable.wind_wave_period;
      case 69:
        return Variable.wind_wave_peak_period;
      case 70:
        return Variable.wind_wave_direction;
      case 71:
        return Variable.swell_wave_height;
      case 72:
        return Variable.swell_wave_period;
      case 73:
        return Variable.swell_wave_peak_period;
      case 74:
        return Variable.swell_wave_direction;
      case 75:
        return Variable.pm10;
      case 76:
        return Variable.pm2p5;
      case 77:
        return Variable.dust;
      case 78:
        return Variable.aerosol_optical_depth;
      case 79:
        return Variable.carbon_monoxide;
      case 80:
        return Variable.nitrogen_dioxide;
      case 81:
        return Variable.ammonia;
      case 82:
        return Variable.ozone;
      case 83:
        return Variable.sulphur_dioxide;
      case 84:
        return Variable.alder_pollen;
      case 85:
        return Variable.birch_pollen;
      case 86:
        return Variable.grass_pollen;
      case 87:
        return Variable.mugwort_pollen;
      case 88:
        return Variable.olive_pollen;
      case 89:
        return Variable.ragweed_pollen;
      case 90:
        return Variable.european_aqi;
      case 91:
        return Variable.european_aqi_pm2p5;
      case 92:
        return Variable.european_aqi_pm10;
      case 93:
        return Variable.european_aqi_nitrogen_dioxide;
      case 94:
        return Variable.european_aqi_ozone;
      case 95:
        return Variable.european_aqi_sulphur_dioxide;
      case 96:
        return Variable.us_aqi;
      case 97:
        return Variable.us_aqi_pm2p5;
      case 98:
        return Variable.us_aqi_pm10;
      case 99:
        return Variable.us_aqi_nitrogen_dioxide;
      case 100:
        return Variable.us_aqi_ozone;
      case 101:
        return Variable.us_aqi_sulphur_dioxide;
      case 102:
        return Variable.us_aqi_carbon_monoxide;
      case 103:
        return Variable.sunshine_duration;
      case 104:
        return Variable.convective_inhibition;
      case 105:
        return Variable.shortwave_radiation_clear_sky;
      case 106:
        return Variable.global_tilted_irradiance;
      case 107:
        return Variable.global_tilted_irradiance_instant;
      case 108:
        return Variable.ocean_current_velocity;
      case 109:
        return Variable.ocean_current_direction;
      case 110:
        return Variable.cloud_base;
      case 111:
        return Variable.cloud_top;
      case 112:
        return Variable.mass_density;
      case 113:
        return Variable.boundary_layer_height;
      case 114:
        return Variable.formaldehyde;
      case 115:
        return Variable.glyoxal;
      case 116:
        return Variable.non_methane_volatile_organic_compounds;
      case 117:
        return Variable.pm10_wildfires;
      case 118:
        return Variable.peroxyacyl_nitrates;
      case 119:
        return Variable.secondary_inorganic_aerosol;
      case 120:
        return Variable.residential_elementary_carbon;
      case 121:
        return Variable.total_elementary_carbon;
      case 122:
        return Variable.pm2_5_total_organic_matter;
      case 123:
        return Variable.sea_salt_aerosol;
      case 124:
        return Variable.nitrogen_monoxide;
      case 125:
        return Variable.thunderstorm_probability;
      case 126:
        return Variable.rain_probability;
      case 127:
        return Variable.freezing_rain_probability;
      case 128:
        return Variable.ice_pellets_probability;
      case 129:
        return Variable.snowfall_probability;
      case 130:
        return Variable.carbon_dioxide;
      case 131:
        return Variable.methane;
      case 132:
        return Variable.sea_level_height_msl;
      case 133:
        return Variable.sea_surface_temperature;
      case 134:
        return Variable.invert_barometer_height;
      case 135:
        return Variable.hail;
      case 136:
        return Variable.albedo;
      case 137:
        return Variable.precipitation_type;
      case 138:
        return Variable.convective_cloud_base;
      case 139:
        return Variable.convective_cloud_top;
      case 140:
        return Variable.snow_depth_water_equivalent;
      case 141:
        return Variable.secondary_swell_wave_height;
      case 142:
        return Variable.secondary_swell_wave_period;
      case 143:
        return Variable.secondary_swell_wave_peak_period;
      case 144:
        return Variable.secondary_swell_wave_direction;
      case 145:
        return Variable.tertiary_swell_wave_height;
      case 146:
        return Variable.tertiary_swell_wave_period;
      case 147:
        return Variable.tertiary_swell_wave_peak_period;
      case 148:
        return Variable.tertiary_swell_wave_direction;
      default:
        throw StateError('Invalid value $value for bit flag enum');
    }
  }

  static Variable? _createOrNull(int? value) =>
      value == null ? null : Variable.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 148;
  static const fb.Reader<Variable> reader = _VariableReader();
}

class _VariableReader extends fb.Reader<Variable> {
  const _VariableReader();

  @override
  int get size => 1;

  @override
  Variable read(fb.BufferContext bc, int offset) =>
      Variable.fromValue(const fb.Uint8Reader().read(bc, offset));
}

enum Aggregation {
  none(0),
  minimum(1),
  maximum(2),
  mean(3),
  p10(4),
  p25(5),
  median(6),
  p75(7),
  p90(8),
  dominant(9),
  sum(10),
  spread(11);

  final int value;
  const Aggregation(this.value);

  factory Aggregation.fromValue(int value) {
    switch (value) {
      case 0:
        return Aggregation.none;
      case 1:
        return Aggregation.minimum;
      case 2:
        return Aggregation.maximum;
      case 3:
        return Aggregation.mean;
      case 4:
        return Aggregation.p10;
      case 5:
        return Aggregation.p25;
      case 6:
        return Aggregation.median;
      case 7:
        return Aggregation.p75;
      case 8:
        return Aggregation.p90;
      case 9:
        return Aggregation.dominant;
      case 10:
        return Aggregation.sum;
      case 11:
        return Aggregation.spread;
      default:
        throw StateError('Invalid value $value for bit flag enum');
    }
  }

  static Aggregation? _createOrNull(int? value) =>
      value == null ? null : Aggregation.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 11;
  static const fb.Reader<Aggregation> reader = _AggregationReader();
}

class _AggregationReader extends fb.Reader<Aggregation> {
  const _AggregationReader();

  @override
  int get size => 1;

  @override
  Aggregation read(fb.BufferContext bc, int offset) =>
      Aggregation.fromValue(const fb.Uint8Reader().read(bc, offset));
}

class VariableWithValues {
  VariableWithValues._(this._bc, this._bcOffset);
  factory VariableWithValues(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VariableWithValues> reader =
      _VariableWithValuesReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  Variable get variable => Variable.fromValue(
      const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 4, 0));
  Unit get unit =>
      Unit.fromValue(const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 6, 0));
  double get value =>
      const fb.Float32Reader().vTableGet(_bc, _bcOffset, 8, 0.0);
  List<double>? get values => const fb.ListReader<double>(fb.Float32Reader())
      .vTableGetNullable(_bc, _bcOffset, 10);
  List<int>? get valuesInt64 => const fb.ListReader<int>(fb.Int64Reader())
      .vTableGetNullable(_bc, _bcOffset, 12);
  int get altitude => const fb.Int16Reader().vTableGet(_bc, _bcOffset, 14, 0);
  Aggregation get aggregation => Aggregation.fromValue(
      const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 16, 0));
  int get pressureLevel =>
      const fb.Int16Reader().vTableGet(_bc, _bcOffset, 18, 0);
  int get depth => const fb.Int16Reader().vTableGet(_bc, _bcOffset, 20, 0);
  int get depthTo => const fb.Int16Reader().vTableGet(_bc, _bcOffset, 22, 0);
  int get ensembleMember =>
      const fb.Int16Reader().vTableGet(_bc, _bcOffset, 24, 0);
  int get previousDay =>
      const fb.Int16Reader().vTableGet(_bc, _bcOffset, 26, 0);

  @override
  String toString() {
    return 'VariableWithValues{variable: ${variable}, unit: ${unit}, value: ${value}, values: ${values}, valuesInt64: ${valuesInt64}, altitude: ${altitude}, aggregation: ${aggregation}, pressureLevel: ${pressureLevel}, depth: ${depth}, depthTo: ${depthTo}, ensembleMember: ${ensembleMember}, previousDay: ${previousDay}}';
  }
}

class _VariableWithValuesReader extends fb.TableReader<VariableWithValues> {
  const _VariableWithValuesReader();

  @override
  VariableWithValues createObject(fb.BufferContext bc, int offset) =>
      VariableWithValues._(bc, offset);
}

class VariableWithValuesBuilder {
  VariableWithValuesBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(12);
  }

  int addVariable(Variable? variable) {
    fbBuilder.addUint8(0, variable?.value);
    return fbBuilder.offset;
  }

  int addUnit(Unit? unit) {
    fbBuilder.addUint8(1, unit?.value);
    return fbBuilder.offset;
  }

  int addValue(double? value) {
    fbBuilder.addFloat32(2, value);
    return fbBuilder.offset;
  }

  int addValuesOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int addValuesInt64Offset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int addAltitude(int? altitude) {
    fbBuilder.addInt16(5, altitude);
    return fbBuilder.offset;
  }

  int addAggregation(Aggregation? aggregation) {
    fbBuilder.addUint8(6, aggregation?.value);
    return fbBuilder.offset;
  }

  int addPressureLevel(int? pressureLevel) {
    fbBuilder.addInt16(7, pressureLevel);
    return fbBuilder.offset;
  }

  int addDepth(int? depth) {
    fbBuilder.addInt16(8, depth);
    return fbBuilder.offset;
  }

  int addDepthTo(int? depthTo) {
    fbBuilder.addInt16(9, depthTo);
    return fbBuilder.offset;
  }

  int addEnsembleMember(int? ensembleMember) {
    fbBuilder.addInt16(10, ensembleMember);
    return fbBuilder.offset;
  }

  int addPreviousDay(int? previousDay) {
    fbBuilder.addInt16(11, previousDay);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VariableWithValuesObjectBuilder extends fb.ObjectBuilder {
  final Variable? _variable;
  final Unit? _unit;
  final double? _value;
  final List<double>? _values;
  final List<int>? _valuesInt64;
  final int? _altitude;
  final Aggregation? _aggregation;
  final int? _pressureLevel;
  final int? _depth;
  final int? _depthTo;
  final int? _ensembleMember;
  final int? _previousDay;

  VariableWithValuesObjectBuilder({
    Variable? variable,
    Unit? unit,
    double? value,
    List<double>? values,
    List<int>? valuesInt64,
    int? altitude,
    Aggregation? aggregation,
    int? pressureLevel,
    int? depth,
    int? depthTo,
    int? ensembleMember,
    int? previousDay,
  })  : _variable = variable,
        _unit = unit,
        _value = value,
        _values = values,
        _valuesInt64 = valuesInt64,
        _altitude = altitude,
        _aggregation = aggregation,
        _pressureLevel = pressureLevel,
        _depth = depth,
        _depthTo = depthTo,
        _ensembleMember = ensembleMember,
        _previousDay = previousDay;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? valuesOffset =
        _values == null ? null : fbBuilder.writeListFloat32(_values!);
    final int? valuesInt64Offset =
        _valuesInt64 == null ? null : fbBuilder.writeListInt64(_valuesInt64!);
    fbBuilder.startTable(12);
    fbBuilder.addUint8(0, _variable?.value);
    fbBuilder.addUint8(1, _unit?.value);
    fbBuilder.addFloat32(2, _value);
    fbBuilder.addOffset(3, valuesOffset);
    fbBuilder.addOffset(4, valuesInt64Offset);
    fbBuilder.addInt16(5, _altitude);
    fbBuilder.addUint8(6, _aggregation?.value);
    fbBuilder.addInt16(7, _pressureLevel);
    fbBuilder.addInt16(8, _depth);
    fbBuilder.addInt16(9, _depthTo);
    fbBuilder.addInt16(10, _ensembleMember);
    fbBuilder.addInt16(11, _previousDay);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class VariablesWithTime {
  VariablesWithTime._(this._bc, this._bcOffset);
  factory VariablesWithTime(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VariablesWithTime> reader = _VariablesWithTimeReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get time => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get timeEnd => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get interval => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  List<VariableWithValues>? get variables =>
      const fb.ListReader<VariableWithValues>(VariableWithValues.reader)
          .vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'VariablesWithTime{time: ${time}, timeEnd: ${timeEnd}, interval: ${interval}, variables: ${variables}}';
  }
}

class _VariablesWithTimeReader extends fb.TableReader<VariablesWithTime> {
  const _VariablesWithTimeReader();

  @override
  VariablesWithTime createObject(fb.BufferContext bc, int offset) =>
      VariablesWithTime._(bc, offset);
}

class VariablesWithTimeBuilder {
  VariablesWithTimeBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addTime(int? time) {
    fbBuilder.addInt64(0, time);
    return fbBuilder.offset;
  }

  int addTimeEnd(int? timeEnd) {
    fbBuilder.addInt64(1, timeEnd);
    return fbBuilder.offset;
  }

  int addInterval(int? interval) {
    fbBuilder.addInt32(2, interval);
    return fbBuilder.offset;
  }

  int addVariablesOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VariablesWithTimeObjectBuilder extends fb.ObjectBuilder {
  final int? _time;
  final int? _timeEnd;
  final int? _interval;
  final List<VariableWithValuesObjectBuilder>? _variables;

  VariablesWithTimeObjectBuilder({
    int? time,
    int? timeEnd,
    int? interval,
    List<VariableWithValuesObjectBuilder>? variables,
  })  : _time = time,
        _timeEnd = timeEnd,
        _interval = interval,
        _variables = variables;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? variablesOffset = _variables == null
        ? null
        : fbBuilder.writeList(
            _variables!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(4);
    fbBuilder.addInt64(0, _time);
    fbBuilder.addInt64(1, _timeEnd);
    fbBuilder.addInt32(2, _interval);
    fbBuilder.addOffset(3, variablesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class WeatherApiResponse {
  WeatherApiResponse._(this._bc, this._bcOffset);
  factory WeatherApiResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<WeatherApiResponse> reader =
      _WeatherApiResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  double get latitude =>
      const fb.Float32Reader().vTableGet(_bc, _bcOffset, 4, 0.0);
  double get longitude =>
      const fb.Float32Reader().vTableGet(_bc, _bcOffset, 6, 0.0);
  double get elevation =>
      const fb.Float32Reader().vTableGet(_bc, _bcOffset, 8, 0.0);
  double get generationTimeMilliseconds =>
      const fb.Float32Reader().vTableGet(_bc, _bcOffset, 10, 0.0);
  int get locationId => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 12, 0);
  Model get model =>
      Model.fromValue(const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 14, 0));
  int get utcOffsetSeconds =>
      const fb.Int32Reader().vTableGet(_bc, _bcOffset, 16, 0);
  String? get timezone =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  String? get timezoneAbbreviation =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  VariablesWithTime? get current =>
      VariablesWithTime.reader.vTableGetNullable(_bc, _bcOffset, 22);
  VariablesWithTime? get daily =>
      VariablesWithTime.reader.vTableGetNullable(_bc, _bcOffset, 24);
  VariablesWithTime? get hourly =>
      VariablesWithTime.reader.vTableGetNullable(_bc, _bcOffset, 26);
  VariablesWithTime? get minutely15 =>
      VariablesWithTime.reader.vTableGetNullable(_bc, _bcOffset, 28);
  VariablesWithTime? get sixHourly =>
      VariablesWithTime.reader.vTableGetNullable(_bc, _bcOffset, 30);

  @override
  String toString() {
    return 'WeatherApiResponse{latitude: ${latitude}, longitude: ${longitude}, elevation: ${elevation}, generationTimeMilliseconds: ${generationTimeMilliseconds}, locationId: ${locationId}, model: ${model}, utcOffsetSeconds: ${utcOffsetSeconds}, timezone: ${timezone}, timezoneAbbreviation: ${timezoneAbbreviation}, current: ${current}, daily: ${daily}, hourly: ${hourly}, minutely15: ${minutely15}, sixHourly: ${sixHourly}}';
  }
}

class _WeatherApiResponseReader extends fb.TableReader<WeatherApiResponse> {
  const _WeatherApiResponseReader();

  @override
  WeatherApiResponse createObject(fb.BufferContext bc, int offset) =>
      WeatherApiResponse._(bc, offset);
}

class WeatherApiResponseBuilder {
  WeatherApiResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(14);
  }

  int addLatitude(double? latitude) {
    fbBuilder.addFloat32(0, latitude);
    return fbBuilder.offset;
  }

  int addLongitude(double? longitude) {
    fbBuilder.addFloat32(1, longitude);
    return fbBuilder.offset;
  }

  int addElevation(double? elevation) {
    fbBuilder.addFloat32(2, elevation);
    return fbBuilder.offset;
  }

  int addGenerationTimeMilliseconds(double? generationTimeMilliseconds) {
    fbBuilder.addFloat32(3, generationTimeMilliseconds);
    return fbBuilder.offset;
  }

  int addLocationId(int? locationId) {
    fbBuilder.addInt64(4, locationId);
    return fbBuilder.offset;
  }

  int addModel(Model? model) {
    fbBuilder.addUint8(5, model?.value);
    return fbBuilder.offset;
  }

  int addUtcOffsetSeconds(int? utcOffsetSeconds) {
    fbBuilder.addInt32(6, utcOffsetSeconds);
    return fbBuilder.offset;
  }

  int addTimezoneOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }

  int addTimezoneAbbreviationOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }

  int addCurrentOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }

  int addDailyOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }

  int addHourlyOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }

  int addMinutely15Offset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }

  int addSixHourlyOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class WeatherApiResponseObjectBuilder extends fb.ObjectBuilder {
  final double? _latitude;
  final double? _longitude;
  final double? _elevation;
  final double? _generationTimeMilliseconds;
  final int? _locationId;
  final Model? _model;
  final int? _utcOffsetSeconds;
  final String? _timezone;
  final String? _timezoneAbbreviation;
  final VariablesWithTimeObjectBuilder? _current;
  final VariablesWithTimeObjectBuilder? _daily;
  final VariablesWithTimeObjectBuilder? _hourly;
  final VariablesWithTimeObjectBuilder? _minutely15;
  final VariablesWithTimeObjectBuilder? _sixHourly;

  WeatherApiResponseObjectBuilder({
    double? latitude,
    double? longitude,
    double? elevation,
    double? generationTimeMilliseconds,
    int? locationId,
    Model? model,
    int? utcOffsetSeconds,
    String? timezone,
    String? timezoneAbbreviation,
    VariablesWithTimeObjectBuilder? current,
    VariablesWithTimeObjectBuilder? daily,
    VariablesWithTimeObjectBuilder? hourly,
    VariablesWithTimeObjectBuilder? minutely15,
    VariablesWithTimeObjectBuilder? sixHourly,
  })  : _latitude = latitude,
        _longitude = longitude,
        _elevation = elevation,
        _generationTimeMilliseconds = generationTimeMilliseconds,
        _locationId = locationId,
        _model = model,
        _utcOffsetSeconds = utcOffsetSeconds,
        _timezone = timezone,
        _timezoneAbbreviation = timezoneAbbreviation,
        _current = current,
        _daily = daily,
        _hourly = hourly,
        _minutely15 = minutely15,
        _sixHourly = sixHourly;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? timezoneOffset =
        _timezone == null ? null : fbBuilder.writeString(_timezone!);
    final int? timezoneAbbreviationOffset = _timezoneAbbreviation == null
        ? null
        : fbBuilder.writeString(_timezoneAbbreviation!);
    final int? currentOffset = _current?.getOrCreateOffset(fbBuilder);
    final int? dailyOffset = _daily?.getOrCreateOffset(fbBuilder);
    final int? hourlyOffset = _hourly?.getOrCreateOffset(fbBuilder);
    final int? minutely15Offset = _minutely15?.getOrCreateOffset(fbBuilder);
    final int? sixHourlyOffset = _sixHourly?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(14);
    fbBuilder.addFloat32(0, _latitude);
    fbBuilder.addFloat32(1, _longitude);
    fbBuilder.addFloat32(2, _elevation);
    fbBuilder.addFloat32(3, _generationTimeMilliseconds);
    fbBuilder.addInt64(4, _locationId);
    fbBuilder.addUint8(5, _model?.value);
    fbBuilder.addInt32(6, _utcOffsetSeconds);
    fbBuilder.addOffset(7, timezoneOffset);
    fbBuilder.addOffset(8, timezoneAbbreviationOffset);
    fbBuilder.addOffset(9, currentOffset);
    fbBuilder.addOffset(10, dailyOffset);
    fbBuilder.addOffset(11, hourlyOffset);
    fbBuilder.addOffset(12, minutely15Offset);
    fbBuilder.addOffset(13, sixHourlyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
